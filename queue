package queue

import (
		def "configFile"
		"stateMachine"
		"time"
)

var idle = status{active: false, addr: "", timer: nil}
var local queue
var remote queue
var backup = make(chan bool)
var new_order chan bool
var update = make(chan bool)


type queueList struct {
	queue_table [def.floors][numOfButtons]status
}

type status struct {
	active bool
	inactive bool
	addr
	timer
}

func Initialize(hold_new_order chan bool, package_out chan def.infoPackage){
	newOrder = hold_new_order
	go update()
	backup(package_out)
}

func AddOrderToLocal(floor int, button int){
	local.StoreOrder(floor, button, status{true, "", nil})
	new_order <- true
}

func AddOrderToRemote(floor int, button int){
	is_present := PresentInRemoteQueue(floor, button)
	remote.setOrder(floor, button, status{true, addr, nil})
	if !is_present {
		go remote.startTimer(floor, button)
	}
	update <- true
}

func RemoveOrder(floor int, package_out chan<- def.infoPackage){
	for i := 0; i < def.NumOfButtons; i++ {
		remote.StopTimer(floor, i)
		local.SetOrder(floor, i, inactive)
		remote.SetOrder(floor, i, inactive)
	}
	package_out <- def.infoPackage{Category: def.order_done, Floor: floor}
}

func StopElevator(floor, dir int) bool {
	return local.StopElevator(floor, dir)
}

func SelectDir(floor, dir int) int {
	return local.SelectDir(floor, dir)
}

func PresentInLocalQueue(floor, button int) bool{
	return local.IsPresent(floor, button)
}

func PresentInRemoteQueue(floor, button int) bool{
	return remote.IsPresent(floor,button)
}

func ReassignOrders(elevator_dead string, package_out chan<- def.infoPackage) {
	for i := 0; i < def.NumOfFloors; i++ {
		for j := 0; j < def.NumButtons; j++ {
			if remote.queue_table[f][b].addr == elevator_dead {
				remote.setOrder(i, j, inactive)
				package_out <- def.infoPackage{Category: def.NewOrder, Floor: i, Button: j}
			}
		}
	}
}
